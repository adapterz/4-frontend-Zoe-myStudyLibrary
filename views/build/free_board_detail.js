const BACKEND_URL="http://localhost:13414";const FRONT_URL="http://localhost:37866";const GET="GET";const POST="POST";const PATCH="PATCH";const DELETE="DELETE";const OK=200;const CREATED=201;const NO_CONTENT=204;const BAD_REQUEST=400;const UNAUTHORIZED=401;const FORBIDDEN=403;const NOT_FOUND=404;const CONFLICT=409;const INTERNAL_SERVER_ERROR=500;const FAIL_FETCH="fail_fetch";const REQUEST_SUCCESS="request_success";const LOGIN_REQUIRED="login_required";const LOGIN="login";const ALREADY_LOGIN="already_login";const LOGOUT="logout";const SIGN_UP="sign_up";const INVALID_BODY="invalid_body";const PW_MISMATCHED="pw_mismatched";const NEW_PW_CONFIRM_MISMATCHED="pw/pw_confirm_mismatched";const ONLY_IMAGE="only_jpg,jpeg,gjf,png(upper_5MB)_format_can_be_uploaded";const DUPLICATED_NICKNAME="duplicated_nickname";const NOT_EXIST="not_exist";const NO_COMMENT="no_comment";const FAVORITE="favorite +1";const CANCEL_FAVORITE="cancel_favorite";const NOT_AUTHORIZATION="not_authorization";const NO_REGISTERED_INFORMATION="no_registered_information";const INFO="info";const ERROR="error";const SUCCESS="success";const WARNING="warning";const QUESTION="question";const CHECK="check";async function getSignUpGuide(){try{const t={mode:"cors",credentials:"include"};const e=await fetch(`${BACKEND_URL}/user/sign-up/guide`,t);const n=e.status;if(n===OK){const t=await e.text();return t}else return await e.json()}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function signUpRequest(t,e,n,o,s,a,r){try{const c={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({id:t,pw:e,confirmPw:n,name:o,nickname:s,phoneNumber:a,gender:r})};const i=await fetch(`${BACKEND_URL}/user/sign-up`,c);const l=await i.json();return l}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function dropOutRequest(){try{const t={mode:"cors",method:DELETE,credentials:"include",headers:{"Access-Control-Allow-Headers":" Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"}};const e=await fetch(`${BACKEND_URL}/user/drop-out`,t);if(e.status===NO_CONTENT)return{state:REQUEST_SUCCESS};const n=await e.json();return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function loginRequest(t,e){try{const n={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type"},body:JSON.stringify({id:t,pw:e})};const o=await fetch(`${BACKEND_URL}/user/login`,n);const s=await o.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function logoutRequest(){try{const t={mode:"cors",method:POST,credentials:"include"};const e=await fetch(`${BACKEND_URL}/user/logout`,t);const n=await e.json();return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getUserLibrary(){try{const t={mode:"cors",credentials:"include"};const e=await fetch(`${BACKEND_URL}/user/user-lib`,t);const n=await e.json();return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function reqRegisterUserLibrary(t){try{const e={mode:"cors",method:PATCH,credentials:"include"};const n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${t}`,e);const o=n.status;if(o===OK)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function deleteUserLibrary(t){try{const e={mode:"cors",method:DELETE,credentials:"include"};const n=await fetch(`${BACKEND_URL}/user/user-lib?libraryIndex=${t}`,e);const o=await n.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editNicknameRequest(t){try{const e={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({nickname:t})};const n=await fetch(`${BACKEND_URL}/user/profile/nickname`,e);const o=n.status;if(o===OK)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editProfileImageRequest(t){try{const e={mode:"cors",method:PATCH,credentials:"include",body:t};const n=await fetch(`${BACKEND_URL}/user/profile/profileImage`,e);const o=n.status;if(o===OK)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editContactRequest(t){try{const e={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({phoneNumber:t})};const n=await fetch(`${BACKEND_URL}/user/new-contact`,e);const o=n.status;if(o===OK)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editPwRequest(t,e,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({pw:t,newPw:e,confirmPw:n})};const s=await fetch(`${BACKEND_URL}/user/new-pw`,o);const a=s.status;if(a===OK)return{state:REQUEST_SUCCESS};const r=await s.json();return r}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getUserInfo(){try{const t={mode:"cors",credentials:"include"};const e=await fetch(`${BACKEND_URL}/user/info`,t);const n=await e.json();return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getRecentBoard(){try{const t={mode:"cors",credentials:"include"};const e=await fetch(`${BACKEND_URL}/board/get`,t);const n=await e.json();if(e.status===OK)return n[0];return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getEntireBoard(t){try{let e;const n={mode:"cors",credentials:"include"};if(void 0===t)e=await fetch(`${BACKEND_URL}/board/get/free-bulletin`,n);else e=await fetch(`${BACKEND_URL}/board/get/free-bulletin?page=${t}`,n);const o=await e.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getDetailBoard(t){try{const e={mode:"cors",credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/get/free-bulletin/${t}`,e);const o=await n.json();if(n.status===OK)o.state=REQUEST_SUCCESS;return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function writePostRequest(t,e,n){try{const o=[];const s=n.split("#");s.shift();for(let t of s){const e={content:t};o.push(e)}const a={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:t,postContent:e,tags:o})};const r=await fetch(`${BACKEND_URL}/board/write`,a);const c=r.status;if(c===CREATED)return{state:REQUEST_SUCCESS};const i=await r.json();return i}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getPostRequest(t){try{const e={mode:"cors",method:GET,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/write?boardIndex=${t}`,e);const o=await n.json();if(n.status===OK)o.state=REQUEST_SUCCESS;return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editPostRequest(t,e,n,o){try{const s=[];const a=o.split("#");a.shift();for(let t of a){const e={content:t};s.push(e)}const r={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:e,postContent:n,tags:s})};const c=await fetch(`${BACKEND_URL}/board/edit?boardIndex=${t}`,r);if(c.status===OK)return{state:REQUEST_SUCCESS};const i=c.json();return i}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function deletePostRequest(t){try{const e={mode:"cors",method:DELETE,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/delete?boardIndex=${t}`,e);const o=n.status;if(o===NO_CONTENT)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function favoritePostRequest(t){try{const e={mode:"cors",method:PATCH,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/like?boardIndex=${t}`,e);const o=n.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getSearchBoard(t,e,n){try{let o;const s={mode:"cors",method:GET,credentials:"include"};if(void 0===n)o=await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${t}&searchContent=${e}`,s);else o=await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${t}&searchContent=${e}&page=${n}`,s);const a=o.json();return a}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function userPostRequest(t){try{let e;const n={mode:"cors",method:GET,credentials:"include"};if(void 0===t)e=await fetch(`${BACKEND_URL}/board/user`,n);else e=await fetch(`${BACKEND_URL}/board/user?page=${t}`,n);const o=e.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function writeCommentRequest(t,e,n){try{let o;const s={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:e})};if(void 0===n)o=await fetch(`${BACKEND_URL}/comment/post?boardIndex=${t}`,s);else o=await fetch(`${BACKEND_URL}/comment/post?boardIndex=${t}&parentIndex=${n}`,s);const a=o.status;if(a===CREATED)return{state:REQUEST_SUCCESS};const r=await o.json();return r}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getDetailComment(t,e){try{const n={mode:"cors",credentials:"include"};if(void 0===e){const e=await fetch(`${BACKEND_URL}/comment?boardIndex=${t}`,n);const o=await e.json();return o}const o=await fetch(`${BACKEND_URL}/comment?boardIndex=${t}&page=${e}`,n);const s=await o.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getComment(t,e){try{const n={mode:"cors",method:GET,credentials:"include"};const o=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${t}&commentIndex=${e}`,n);const s=await o.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editCommentRequest(t,e,n){try{const o={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({content:n})};const s=await fetch(`${BACKEND_URL}/comment/edit?boardIndex=${t}&commentIndex=${e}`,o);const a=s.status;if(a===OK)return{state:REQUEST_SUCCESS};const r=await s.json();return r}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function deleteCommentRequest(t,e){const n={mode:"cors",method:DELETE,credentials:"include"};const o=await fetch(`${BACKEND_URL}/comment/delete?boardIndex=${t}&commentIndex=${e}`,n);const s=o.status;if(s===NO_CONTENT)return{state:REQUEST_SUCCESS};const a=await o.json();return a}async function userCommentRequest(t){try{const e={mode:"cors",method:GET,credentials:"include"};if(void 0===t){const t=await fetch(`${BACKEND_URL}/comment/user`,e);const n=await t.json();return n}const n=await fetch(`${BACKEND_URL}/comment/user?page=${t}`,e);const o=await n.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function sweetAlert(t,e,n,o){let s=!1;if(t===INFO){const t=await Swal.fire({title:e,text:n,icon:"info",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===SUCCESS){const t=await Swal.fire({title:e,text:n,icon:"success",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===WARNING)if(o){const t=await Swal.fire({title:e,text:n,icon:"warning",confirmButtonColor:"#ffa07a",footer:o});if(t.isConfirmed||t.isDismissed)s=!0;return s}else{const t=await Swal.fire({title:e,text:n,icon:"warning",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===ERROR)if(o){const t=await Swal.fire({title:e,text:n,icon:"error",confirmButtonColor:"#ffa07a",footer:o});if(t.isConfirmed||t.isDismissed)s=!0;return s}else{const t=await Swal.fire({title:e,text:n,icon:"error",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===QUESTION){const t=await Swal.fire({title:e,text:n,icon:"question",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===CHECK){const t=Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!0,didOpen:t=>{t.addEventListener("mouseenter",Swal.stopTimer);t.addEventListener("mouseleave",Swal.resumeTimer)}});t.fire({icon:n,title:e})}}let t=2;async function getBoardIndex(){const t=location.href;const e=t.split(`${FRONT_URL}/board/`);const n=e[1];return n}async function detailBoard(){const t=await getBoardIndex();const e=await getDetailBoard(t);if(e.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글","게시글 목록으로 이동");if(t)location.href="/board"}else if(e.state===REQUEST_SUCCESS){document.getElementsByClassName("freeBoard__board--title")[0].innerHTML=`${e.dataOfBoard.postTitle}`;document.getElementsByClassName("freeBoard__board--viewCount")[0].innerHTML=`<img class="freeBoard__board--img" src="/views/img/view.png" alt="조회수 아이콘" /> ${e.dataOfBoard.viewCount}`;document.getElementsByClassName("freeBoard__board--favoriteCount")[0].innerHTML=`<img class="freeBoard__board--img" src="/views/img/love.png" alt="좋아요 아이콘" /> ${e.dataOfBoard.favoriteCount}`;document.getElementsByClassName("freeBoard__board--content")[0].innerHTML=`${e.dataOfBoard.postContent}`;document.getElementsByClassName("freeBoard__board--createDate")[0].innerHTML=`${e.dataOfBoard.createDate}`;const t=e.dataOfTag.length;for(let n=0;n<5;++n)if(n>=t)document.getElementsByClassName("freeBoard__board--tag")[n].style.display="none";else document.getElementsByClassName("freeBoard__board--tag")[n].innerHTML=`# ${e.dataOfTag[n].tag}`;document.getElementsByClassName("freeBoard__user--nickname")[0].innerHTML=`${e.dataOfUser.nickname}`;if(e.dataOfUser.isProfileImage){const t=e.dataOfUser.profileImage;const n=e.dataOfUser.mime;const o=document.getElementsByClassName("freeBoard__user--profileImage")[0];o.innerHTML=`<img class="freeBoard__user--profileImageImg" src="data:${n};base64,${t}" alt="글 작성한 유저 프로필 사진">`}const n=await getUserInfo();if(n===LOGIN_REQUIRED||n.userIndex!==e.dataOfUser.userIndex)document.getElementsByClassName("container__freeBoard--authorization")[0].style.display="none"}else{await sweetAlert(ERROR,"게시글 불러오기 실패","예상치 못한 에러입니다",`서버 메시지: ${e.state}`);location.href="/board"}}async function favoritePost(){const t=await getBoardIndex();const e=await favoritePostRequest(t);if(e.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","새 창에서 로그인 해주세요");if(t)window.open("/user/login")}else if(e.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.");if(t)location.href="/board"}else if(e.state===FAVORITE)await sweetAlert(CHECK,"좋아요 +1","success");else if(e.state===CANCEL_FAVORITE)await sweetAlert(CHECK,"좋아요 취소","success");else await sweetAlert(ERROR,"좋아요 요청 실패","예상치 못한 에러입니다",`서버 메시지: ${e.state}`)}async function deletePost(){const t=await getBoardIndex();const e=await deletePostRequest(t);if(e.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인창으로갑니다.");if(t)location.href="/user/login"}else if(e.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.");if(t)location.href="/board"}else if(e.state===NOT_AUTHORIZATION){const t=await sweetAlert(WARNING,"권한이 없습니다.","해당 게시글을 작성한 유저가 아닙니다.");if(t)location.href="/board"}else if(e.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"게시글 삭제 성공","게시글 목록으로 돌아갑니다.");if(t)location.href="/board"}else{const t=await sweetAlert(ERROR,"게시물 삭제 오류","게시글 목록으로 돌아갑니다.",`서버 메세지: ${e.state}`);if(t)location.href="/board"}}async function editPage(){const t=await getBoardIndex();location.href=`/board/write?boardIndex=${t}`}async function detailComment(){const t=await getBoardIndex();const e=await getDetailComment(t);if(e.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.");if(t)location.href="/board"}else if(e.state===NO_COMMENT){const t=document.createElement("li");t.classList.add("freeBoard__rootComment");t.style.border="none";document.getElementsByClassName("freeBoard__comment")[0].appendChild(t);const e=document.createElement("p");e.classList.add("freeBoard__rootComment--nickname");e.textContent="댓글이 없습니다";document.getElementsByClassName("freeBoard__rootComment")[0].appendChild(e)}else if(void 0!==e[0])for(let t of e){const{commentIndex:e,userIndex:n,isRoot:o,isDeleted:s,nickname:a,commentContent:r,createDate:c}=t;await addComment(e,n,o,s,a,r,c)}else{const t=await sweetAlert(ERROR,"댓글 불러오기 실패","예상치 못한 에러입니다",`서버 메시지: ${e.state}`);if(t)location.href="/board"}}async function addComment(t,e,n,o,s,a,r){if(n){const n=document.createElement("li");n.classList.add("freeBoard__rootComment");document.getElementsByClassName("freeBoard__comment")[0].appendChild(n);const c=document.getElementsByClassName("freeBoard__rootComment").length-1;const i=document.createElement("p");i.classList.add("freeBoard__rootComment--nickname");i.textContent=s;document.getElementsByClassName("freeBoard__rootComment")[c].appendChild(i);const l=document.createElement("p");l.classList.add("freeBoard__rootComment--content");if(o)l.textContent="삭제된 댓글입니다.";if(!o)l.textContent=a;document.getElementsByClassName("freeBoard__rootComment")[c].appendChild(l);const d=document.createElement("p");d.classList.add("freeBoard__rootComment--createDate");d.textContent=r;document.getElementsByClassName("freeBoard__rootComment")[c].appendChild(d);const m=document.createElement("section");m.classList.add("button__comment");document.getElementsByClassName("freeBoard__rootComment")[c].appendChild(m);const f=document.getElementsByClassName("freeBoard__rootComment").length+document.getElementsByClassName("freeBoard__childComment").length-1;const u=await getUserInfo();const w=document.createElement("button");w.classList.add("button__comment--edit");w.setAttribute("commentIndex",t);w.textContent="수정하기";w.setAttribute("onclick","editComment(this.getAttribute('commentIndex'))");const h=document.createElement("button");h.classList.add("button__comment--delete");h.setAttribute("commentIndex",t);h.textContent="삭제하기";h.setAttribute("onclick","deleteComment(this.getAttribute('commentIndex'))");if(u.state===LOGIN_REQUIRED||u.userIndex!==e){w.style.display="none";h.style.display="none"}document.getElementsByClassName("button__comment")[f].appendChild(w);document.getElementsByClassName("button__comment")[f].appendChild(h);const g=document.createElement("button");g.classList.add("button__comment--write");g.setAttribute("commentIndex",t);g.textContent="대댓글작성";g.setAttribute("onclick","writeChildComment(this.getAttribute('commentIndex'))");document.getElementsByClassName("button__comment")[f].appendChild(g)}else if(!n){const n=document.createElement("li");n.classList.add("freeBoard__childComment");document.getElementsByClassName("freeBoard__comment")[0].appendChild(n);const c=document.getElementsByClassName("freeBoard__childComment").length-1;const i=document.createElement("p");i.classList.add("freeBoard__childComment--nickname");i.textContent=s;document.getElementsByClassName("freeBoard__childComment")[c].appendChild(i);const l=document.createElement("p");l.classList.add("freeBoard__childComment--content");if(o)l.textContent="삭제된 댓글입니다.";if(!o)l.textContent=a;document.getElementsByClassName("freeBoard__childComment")[c].appendChild(l);const d=document.createElement("p");d.classList.add("freeBoard__childComment--createDate");d.textContent=r;document.getElementsByClassName("freeBoard__childComment")[c].appendChild(d);const m=document.createElement("section");m.classList.add("button__comment");document.getElementsByClassName("freeBoard__childComment")[c].appendChild(m);const f=document.getElementsByClassName("freeBoard__rootComment").length+document.getElementsByClassName("freeBoard__childComment").length-1;const u=await getUserInfo();const w=document.createElement("button");w.classList.add("button__comment--edit");w.setAttribute("commentIndex",t);w.textContent="수정하기";w.setAttribute("onclick","editComment(this.getAttribute('commentIndex'))");const h=document.createElement("button");h.classList.add("button__comment--delete");h.setAttribute("commentIndex",t);h.textContent="삭제하기";h.setAttribute("onclick","deleteComment(this.getAttribute('commentIndex'))");console.log(`대댓글 ${t} ${u.userIndex}  ${e}`);if(u.state===LOGIN_REQUIRED||u.userIndex!==e){w.style.display="none";h.style.display="none"}document.getElementsByClassName("button__comment")[f].appendChild(w);document.getElementsByClassName("button__comment")[f].appendChild(h)}}async function writeComment(){const t=await getUserInfo();if(t.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}const{isConfirmed:e,value:n}=await Swal.fire({input:"textarea",title:"댓글 작성",inputPlaceholder:"2~500자 사이로 댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 댓글을 작성해주세요."},showCancelButton:!0,inputValidator:t=>{if(!t)return"내용을 입력해주세요.";if(t.length<2||t.length>500)return`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${t.length}자입니다.`}});if(e){const t=await getBoardIndex();const e=await writeCommentRequest(t,n);console.log(e);if(e.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"댓글 작성 성공!","🤩");if(t)location.reload()}else if(e.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}else if(e.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.");if(t)location.href="/board"}else{const t=await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${e.state}`);if(t)location.reload()}}else await sweetAlert(CHECK,"댓글 작성 취소","warning")}async function writeChildComment(t){const e=await getUserInfo();if(e.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}const{isConfirmed:n,value:o}=await Swal.fire({input:"textarea",title:"대댓글 작성",inputPlaceholder:"2~500자 사이로 대댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 대댓글을 작성해주세요."},showCancelButton:!0,inputValidator:t=>{if(!t)return"내용을 입력해주세요.";if(t.length<2||t.length>500)return`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${t.length}자입니다.`}});if(n){const e=await getBoardIndex();const n=await writeCommentRequest(e,o,t);console.log(n);if(n.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"댓글 작성 성공!","🤩");if(t)location.reload()}else if(n.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}else if(n.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.");if(t)location.href="/board"}else if(n.state===NO_COMMENT){const t=await sweetAlert(WARNING,"존재하지 않는 댓글입니다.","삭제됐거나 존재하지않는 게시글입니다.");if(t)location.reload()}else{const t=await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${n.state}`);if(t)location.reload()}}else await sweetAlert(CHECK,"댓글 작성 취소","warning")}async function editComment(t){const e=await getBoardIndex();const n=await getComment(e,t);if(n.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");location.href="/user/login"}else if(n.state===NOT_EXIST){const t=await sweetAlert(WARNING,"게시글이 존재하지 않습니다.","삭제되거나 존재하지 않는 게시글");location.href="/board"}else if(n.state===NO_COMMENT){const t=await sweetAlert(WARNING,"댓글이 존재하지 않습니다.","삭제되거나 존재하지 않는 댓글");location.href="/board"}else if(void 0!==n.commentContent){const{isConfirmed:e,value:o}=await Swal.fire({input:"textarea",title:"댓글 수정",inputValue:n.commentContent,inputPlaceholder:"2~500자 사이로 댓글을 작성해주세요.",inputAttributes:{"aria-label":"2~500자 사이로 댓글을 작성해주세요."},showCancelButton:!0,inputValidator:t=>{if(!t)return"내용을 입력해주세요.";if(t.length<2||t.length>500)return`댓글은 2~500글자 사이로 작성해야합니다. 현재 ${t.length}자입니다.`}});if(e){const e=await getBoardIndex();const n=await editCommentRequest(e,t,o);console.log(n);if(n.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"댓글 수정 성공!","🤩");if(t)location.reload()}else if(n.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}else if(n.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제됐거나 존재하지않는 게시글입니다.");if(t)location.href="/board"}else{const t=await sweetAlert(ERROR,"댓글 작성 실패","예상치 못한 오류입니다.",`서버 메세지: ${n.state}`);if(t)location.reload()}}else await sweetAlert(CHECK,"댓글 수정 취소","warning")}}async function deleteComment(t){const e=await getBoardIndex();const n=await deleteCommentRequest(e,t);if(n.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인창으로 갑니다.");if(t)location.href="/user/login"}else if(n.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.");if(t)location.href="/board"}else if(n.state===NO_COMMENT){const t=await sweetAlert(WARNING,"존재하지 않는 댓글입니다.","삭제되거나 존재하지 않는 댓글입니다.");if(t)location.reload()}else if(n.state===NOT_AUTHORIZATION){const t=await sweetAlert(WARNING,"권한이 없습니다.","해당 댓글을 작성한 유저가 아닙니다.");if(t)location.href="/board"}else if(n.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"댓글 삭제 성공","👌");if(t)location.reload()}else{const t=await sweetAlert(ERROR,"게시물 삭제 오류","게시글 목록으로 돌아갑니다.",`서버 메세지: ${n.state}`);if(t)location.href="/board"}}async function lifeCycle(){await detailBoard();await detailComment();window.onscroll=async function(){if(window.innerHeight+window.scrollY>=document.body.offsetHeight-1){const e=await getBoardIndex();let n;n=await getDetailComment(e,t++);if(void 0!==n[0])for(let t in n)for(let t of n){const{commentIndex:e,userIndex:n,isRoot:o,isDeleted:s,nickname:a,commentContent:r,createDate:c}=t;await addComment(e,n,o,s,a,r,c)}else if(n.state!==NO_COMMENT){const t=await sweetAlert(ERROR,"댓글 불러오기 실패","예상치 못한 오류입니다."`서버 메세지: ${n.state}`)}}}}lifeCycle();