const BACKEND_URL="http://localhost:13414";const FRONT_URL="http://localhost:37866";const GET="GET";const POST="POST";const PATCH="PATCH";const DELETE="DELETE";const OK=200;const CREATED=201;const NO_CONTENT=204;const BAD_REQUEST=400;const UNAUTHORIZED=401;const FORBIDDEN=403;const NOT_FOUND=404;const CONFLICT=409;const INTERNAL_SERVER_ERROR=500;const FAIL_FETCH="fail_fetch";const REQUEST_SUCCESS="request_success";const LOGIN_REQUIRED="login_required";const LOGIN="login";const ALREADY_LOGIN="already_login";const LOGOUT="logout";const SIGN_UP="sign_up";const INVALID_BODY="invalid_body";const PW_MISMATCHED="pw_mismatched";const NEW_PW_CONFIRM_MISMATCHED="pw/pw_confirm_mismatched";const ONLY_IMAGE="only_jpg,jpeg,gjf,png(upper_5MB)_format_can_be_uploaded";const DUPLICATED_NICKNAME="duplicated_nickname";const NOT_EXIST="not_exist";const NO_COMMENT="no_comment";const FAVORITE="favorite +1";const CANCEL_FAVORITE="cancel_favorite";const NOT_AUTHORIZATION="not_authorization";const NO_REGISTERED_INFORMATION="no_registered_information";const INFO="info";const ERROR="error";const SUCCESS="success";const WARNING="warning";const QUESTION="question";const CHECK="check";async function getRecentBoard(){try{const t={mode:"cors",credentials:"include"};const e=await fetch(`${BACKEND_URL}/board/get`,t);const n=await e.json();if(e.status===OK)return n[0];return n}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getEntireBoard(t){try{let e;const n={mode:"cors",credentials:"include"};if(void 0===t)e=await fetch(`${BACKEND_URL}/board/get/free-bulletin`,n);else e=await fetch(`${BACKEND_URL}/board/get/free-bulletin?page=${t}`,n);const o=await e.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getDetailBoard(t){try{const e={mode:"cors",credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/get/free-bulletin/${t}`,e);const o=await n.json();if(n.status===OK)o.state=REQUEST_SUCCESS;return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function writePostRequest(t,e,n){try{const o=[];const s=n.split("#");s.shift();for(let t of s){const e={content:t};o.push(e)}const i={mode:"cors",method:POST,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:t,postContent:e,tags:o})};const a=await fetch(`${BACKEND_URL}/board/write`,i);const c=a.status;if(c===CREATED)return{state:REQUEST_SUCCESS};const r=await a.json();return r}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getPostRequest(t){try{const e={mode:"cors",method:GET,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/write?boardIndex=${t}`,e);const o=await n.json();if(n.status===OK)o.state=REQUEST_SUCCESS;return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function editPostRequest(t,e,n,o){try{const s=[];const i=o.split("#");i.shift();for(let t of i){const e={content:t};s.push(e)}const a={mode:"cors",method:PATCH,credentials:"include",headers:{"Content-Type":"application/json;charset=utf-8","Access-Control-Allow-Headers":"Content-Type, Referrer-Policy","Referrer-Policy":"strict-origin-when-cross-origin"},body:JSON.stringify({category:"자유게시판",postTitle:e,postContent:n,tags:s})};const c=await fetch(`${BACKEND_URL}/board/edit?boardIndex=${t}`,a);if(c.status===OK)return{state:REQUEST_SUCCESS};const r=c.json();return r}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function deletePostRequest(t){try{const e={mode:"cors",method:DELETE,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/delete?boardIndex=${t}`,e);const o=n.status;if(o===NO_CONTENT)return{state:REQUEST_SUCCESS};const s=await n.json();return s}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function favoritePostRequest(t){try{const e={mode:"cors",method:PATCH,credentials:"include"};const n=await fetch(`${BACKEND_URL}/board/like?boardIndex=${t}`,e);const o=n.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function getSearchBoard(t,e,n){try{let o;const s={mode:"cors",method:GET,credentials:"include"};if(void 0===n)o=await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${t}&searchContent=${e}`,s);else o=await fetch(`${BACKEND_URL}/board/search/free-bulletin?searchOption=${t}&searchContent=${e}&page=${n}`,s);const i=o.json();return i}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function userPostRequest(t){try{let e;const n={mode:"cors",method:GET,credentials:"include"};if(void 0===t)e=await fetch(`${BACKEND_URL}/board/user`,n);else e=await fetch(`${BACKEND_URL}/board/user?page=${t}`,n);const o=e.json();return o}catch(t){console.log(`FETCH ERROR: ${t}`);return{state:FAIL_FETCH}}}async function sweetAlert(t,e,n,o){let s=!1;if(t===INFO){const t=await Swal.fire({title:e,text:n,icon:"info",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===SUCCESS){const t=await Swal.fire({title:e,text:n,icon:"success",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===WARNING)if(o){const t=await Swal.fire({title:e,text:n,icon:"warning",confirmButtonColor:"#ffa07a",footer:o});if(t.isConfirmed||t.isDismissed)s=!0;return s}else{const t=await Swal.fire({title:e,text:n,icon:"warning",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===ERROR)if(o){const t=await Swal.fire({title:e,text:n,icon:"error",confirmButtonColor:"#ffa07a",footer:o});if(t.isConfirmed||t.isDismissed)s=!0;return s}else{const t=await Swal.fire({title:e,text:n,icon:"error",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===QUESTION){const t=await Swal.fire({title:e,text:n,icon:"question",confirmButtonColor:"#ffa07a"});if(t.isConfirmed||t.isDismissed)s=!0;return s}else if(t===CHECK){const t=Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:3e3,timerProgressBar:!0,didOpen:t=>{t.addEventListener("mouseenter",Swal.stopTimer);t.addEventListener("mouseleave",Swal.resumeTimer)}});t.fire({icon:n,title:e})}}let t;async function checkTitleLength(t){const e=t.value.length;document.getElementsByClassName("container__title--length")[0].innerHTML=`(${e}/50)`;if(e>=50){const e=t.value.substring(0,49);t.value=e;const n=t.value.length;document.getElementsByClassName("container__title--length")[0].innerHTML=`(${n}/50)`;await sweetAlert(WARNING,"글자수 초과","제목은 50자 까지만 입력가능합니다.")}}async function checkContentLength(t){const e=t.value.length;document.getElementsByClassName("container__content--length")[0].innerHTML=`(${e}/5000)`;if(e>=5e3){const e=t.value.substring(0,4999);t.value=e;const n=t.value.length;document.getElementsByClassName("container__content--length")[0].innerHTML=`(${n}/5000)`;await sweetAlert(WARNING,"글자수 초과","내용은 5000자 까지만 입력가능합니다.")}}async function checkTagValidation(t){let e=!0;const n=t.value.split("#");n.shift();if(0===t.value.length){t.setCustomValidity("");t.reportValidity();return}if("#"!==t.value.substring(0,1)){t.setCustomValidity("첫글자는 #으로 시작해주세요.");e=!1}else if(n.length>5){t.setCustomValidity(`태그는 최대 5개까지입니다. 현재 태그 개수: ${n.length}`);e=!1}else for(let o of n)if(o.length<2||o.length>8){t.setCustomValidity("하나의 태그는 2~8 글자 사이입니다.");e=!1}else{const n=/^[가-힣]+$/.test(o);if(!n){t.setCustomValidity("태그는 한글로만 작성해주세요(+ 가(o)ㄱ(x))");e=!1}}if(e)t.setCustomValidity("");t.reportValidity()}async function writePost(t,e,n){const o=await writePostRequest(t,e,n);if(o.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","새 창에서 로그인 해주세요");window.open("/user/login")}if(o.state===REQUEST_SUCCESS){const t=await sweetAlert(SUCCESS,"글 작성 성공","글 목록으로 이동합니다.");if(t){const t="/board";location.href=t}}if(o.state!==LOGIN_REQUIRED&&o.state!==REQUEST_SUCCESS)await sweetAlert(ERROR,"글 작성 실패","예상치 못한 에러입니다.",`서버 메시지: ${o.state}`)}async function checkRequest(){const e=new URLSearchParams(location.search);for(const[n,o]of e)if("boardIndex"===n){const e=Number(o);if(!isNaN(e)){t=e;const n=await getPostRequest(o);if(n.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인이 필요한 기능입니다.");if(t){const t="/user/login";location.href=t}}else if(n.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글입니다.","삭제되거나 존재하지 않는 게시글입니다.");if(t)location.href="/board"}else if(n.state===REQUEST_SUCCESS){document.getElementsByClassName("freeBoard__title")[0].innerHTML="자유게시판 - 글 수정";const t=document.getElementsByClassName("container__write--title")[0];const e=document.getElementsByClassName("container__write--content")[0];t.value=n.dataOfBoard.postTitle;e.value=n.dataOfBoard.postContent;await checkTitleLength(t);await checkContentLength(e);let o=``;for(let t of n.dataOfTag)o=`${o}#${t.tag}`;document.getElementsByClassName("container__write--tag")[0].value=o;document.getElementsByClassName("container__write")[0].setAttribute("onsubmit","editPost(thisBoardIndex,document.getElementsByName('postTitle')[0].value,document.getElementsByName('postContent')[0].value,document.getElementsByName('tags')[0].value);return false")}else await sweetAlert(ERROR,"기존 게시글 정보 불러오기 실패","예상치 못한 에러입니다.",`서버 메시지: ${n.state}`)}else{const t=await sweetAlert(WARNING,"잘못된 접근입니다.","유효하지 않은 게시글 정보입니다..");if(t)location.href="/board"}}}async function editPost(t,e,n,o){const s=await editPostRequest(t,e,n,o);if(s.state===LOGIN_REQUIRED){const t=await sweetAlert(WARNING,"로그인 필요","로그인 해주세요");if(t)location.href="/user/login"}else if(s.state===NOT_EXIST){const t=await sweetAlert(WARNING,"존재하지 않는 게시글","게시글 목록으로 이동");if(t)location.href="/board"}else if(s.state===REQUEST_SUCCESS){const e=await sweetAlert(SUCCESS,"글 수정 성공","해당 게시글로 이동합니다.");if(e)location.href=`/board/${t}`}else await sweetAlert(ERROR,"글 작성 실패","예상치 못한 에러입니다.",`서버 메시지: ${s.state}`)}async function lifeCycle(){await checkRequest()}lifeCycle();